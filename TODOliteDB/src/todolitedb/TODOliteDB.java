/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package todolitedb;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Date;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import org.jdatepicker.JDatePicker;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;

/**
 *
 * @author Jacques
 */
public class TODOliteDB extends javax.swing.JFrame {

    Database db;
    DefaultListModel<TodoItem> modelItemList = new DefaultListModel<>();
    boolean flagAddEdit;

    /**
     * Creates new form TODOliteDB
     */
    public TODOliteDB() {
        try {
            db = new Database();
            initComponents();
            refreshItemList();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "failed to open database connection ",
                    "Database error",
                    JOptionPane.WARNING_MESSAGE);
            System.exit(1);
        }

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        centerOnParent(dlgEditItem, true);
    }

    // Center on parent ( absolute true/false (exact center or 25% upper left) )
    final public void centerOnParent(final Window child, final boolean absolute) {
        child.pack();
        boolean useChildsOwner = child.getOwner() != null ? ((child.getOwner() instanceof JFrame) || (child.getOwner() instanceof JDialog)) : false;
        final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        final Dimension parentSize = useChildsOwner ? child.getOwner().getSize() : screenSize;
        final Point parentLocationOnScreen = useChildsOwner ? child.getOwner().getLocationOnScreen() : new Point(0, 0);
        final Dimension childSize = child.getSize();
        childSize.width = Math.min(childSize.width, screenSize.width);
        childSize.height = Math.min(childSize.height, screenSize.height);
        child.setSize(childSize);
        int x;
        int y;
        if ((child.getOwner() != null) && child.getOwner().isShowing()) {
            x = (parentSize.width - childSize.width) / 2;
            y = (parentSize.height - childSize.height) / 2;
            x += parentLocationOnScreen.x;
            y += parentLocationOnScreen.y;
        } else {
            x = (screenSize.width - childSize.width) / 2;
            y = (screenSize.height - childSize.height) / 2;
        }
        if (!absolute) {
            x /= 2;
            y /= 2;
        }
        child.setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        popupMenu = new javax.swing.JPopupMenu();
        miDelete = new javax.swing.JMenuItem();
        dlgEditItem = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        tfDlgTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfDlgDueDate = new javax.swing.JTextField();
        btDlgSelectDate = new javax.swing.JButton();
        ckDlgDone = new javax.swing.JCheckBox();
        btDlgSave = new javax.swing.JButton();
        btDlgCancel = new javax.swing.JButton();
        lblDlgTitleError = new javax.swing.JLabel();
        lblDlgDueDateError = new javax.swing.JLabel();
        fileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        tfFilter = new javax.swing.JTextField();
        btAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstItem = new javax.swing.JList<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miExportCSV = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        miDelete.setText("Delete");
        miDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeleteActionPerformed(evt);
            }
        });
        popupMenu.add(miDelete);

        jLabel2.setText("Title");

        jLabel3.setText("DueDate");

        btDlgSelectDate.setText("Select Date");
        btDlgSelectDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDlgSelectDateActionPerformed(evt);
            }
        });

        ckDlgDone.setText("done?");

        btDlgSave.setText("Save");
        btDlgSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDlgSaveActionPerformed(evt);
            }
        });

        btDlgCancel.setText("Cancel");
        btDlgCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDlgCancelActionPerformed(evt);
            }
        });

        lblDlgTitleError.setForeground(new java.awt.Color(255, 0, 0));
        lblDlgTitleError.setText("Title must be 2-50 character without semicolon");

        lblDlgDueDateError.setForeground(new java.awt.Color(255, 0, 0));
        lblDlgDueDateError.setText("DueDate is not valid, format is dd-MM-yyyy");

        javax.swing.GroupLayout dlgEditItemLayout = new javax.swing.GroupLayout(dlgEditItem.getContentPane());
        dlgEditItem.getContentPane().setLayout(dlgEditItemLayout);
        dlgEditItemLayout.setHorizontalGroup(
            dlgEditItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgEditItemLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(dlgEditItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDlgDueDateError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(dlgEditItemLayout.createSequentialGroup()
                        .addGroup(dlgEditItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDlgTitleError)
                            .addGroup(dlgEditItemLayout.createSequentialGroup()
                                .addGroup(dlgEditItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dlgEditItemLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(23, 23, 23))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGroup(dlgEditItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dlgEditItemLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(tfDlgDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dlgEditItemLayout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(tfDlgTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(btDlgSelectDate)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(29, 29, 29))
            .addGroup(dlgEditItemLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btDlgSave)
                .addGap(74, 74, 74)
                .addComponent(btDlgCancel)
                .addGap(130, 130, 130))
            .addGroup(dlgEditItemLayout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(ckDlgDone)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dlgEditItemLayout.setVerticalGroup(
            dlgEditItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgEditItemLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(dlgEditItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfDlgTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(lblDlgTitleError)
                .addGap(6, 6, 6)
                .addGroup(dlgEditItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfDlgDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(btDlgSelectDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblDlgDueDateError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ckDlgDone)
                .addGap(29, 29, 29)
                .addGroup(dlgEditItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btDlgSave)
                    .addComponent(btDlgCancel))
                .addGap(55, 55, 55))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Filter:");

        tfFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfFilterActionPerformed(evt);
            }
        });

        btAdd.setText("Add");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        lstItem.setModel(modelItemList);
        lstItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstItemMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstItem);

        jMenu1.setText("File");

        miExportCSV.setText("Export to CSV...");
        miExportCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExportCSVActionPerformed(evt);
            }
        });
        jMenu1.add(miExportCSV);
        jMenu1.add(jSeparator1);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        jMenu1.add(miExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfFilter))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(btAdd)
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfFilterActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        lblDlgTitleError.setVisible(false);
        lblDlgDueDateError.setVisible(false);
        flagAddEdit = true;
        dlgEditItem.setVisible(true);
    }//GEN-LAST:event_btAddActionPerformed

    private void lstItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstItemMouseClicked
        if ((evt.getButton() == MouseEvent.BUTTON3) && evt.getClickCount() == 1) {
            lstItem.setSelectedIndex(lstItem.locationToIndex(evt.getPoint()));
            if (lstItem.getSelectedIndex() != -1) {
                popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }

        if ((evt.getButton() == MouseEvent.BUTTON1) && evt.getClickCount() == 2) {
            int id = modelItemList.get(lstItem.getSelectedIndex()).id;
            tfDlgTitle.setText(modelItemList.get(lstItem.getSelectedIndex()).title);
            tfDlgDueDate.setText(modelItemList.get(lstItem.getSelectedIndex()).dueDate + " ");
            if (modelItemList.get(lstItem.getSelectedIndex()).isDone) {
                ckDlgDone.setSelected(true);
            } else {
                ckDlgDone.setSelected(false);
            }
            lblDlgTitleError.setVisible(false);
            lblDlgDueDateError.setVisible(false);
            flagAddEdit = false;
            dlgEditItem.setVisible(true);
        }
    }//GEN-LAST:event_lstItemMouseClicked

    private void btDlgSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDlgSaveActionPerformed
        if (isDataValid(tfDlgTitle.getText(), lblDlgTitleError, tfDlgDueDate.getText(), lblDlgDueDateError)) {
            java.sql.Date sqlDueDate = null;
            String title = tfDlgTitle.getText();
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            try {
                java.util.Date dueDate = df.parse(tfDlgDueDate.getText());
                sqlDueDate = new java.sql.Date(dueDate.getTime());
            } catch (ParseException ex) {
                Logger.getLogger(TODOliteDB.class.getName()).log(Level.SEVERE, null, ex);
            }
            boolean isDone = ckDlgDone.isSelected();
            try {
                if (flagAddEdit) {
                    db.addItem(title, sqlDueDate, isDone);
                } else {
                    int id = modelItemList.get(lstItem.getSelectedIndex()).id;
                    TodoItem i = new TodoItem(id, title, sqlDueDate, isDone);
                    db.updateItem(i);
                }
                refreshItemList();
                tfDlgTitle.setText("");
                tfDlgDueDate.setText("");
                ckDlgDone.setSelected(false);
                dlgEditItem.setVisible(false);
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this,
                        "Failded execute database query",
                        "Database error",
                        JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btDlgSaveActionPerformed

    private void miDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeleteActionPerformed
        int ID = modelItemList.get(lstItem.getSelectedIndex()).id;
        try {
            db.deleteItem(ID);// TODO add your handling code here:
            refreshItemList();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Failded execute database query",
                    "Database error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_miDeleteActionPerformed

    private void btDlgCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDlgCancelActionPerformed
        dlgEditItem.setVisible(false);
    }//GEN-LAST:event_btDlgCancelActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        dispose();
    }//GEN-LAST:event_miExitActionPerformed

    private void miExportCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExportCSVActionPerformed
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File currentFile = fileChooser.getSelectedFile();
            // FIXME: what if user selected "All files" filter?
            if (fileChooser.getFileFilter() != fileChooser.getAcceptAllFileFilter()) {
                if (!currentFile.getName().toLowerCase().endsWith(".csv")) {
                    currentFile = new File(currentFile.getAbsolutePath() + ".csv");
                }
            }
            try (PrintWriter pw = new PrintWriter(currentFile)) {
                ArrayList<TodoItem> rs = new ArrayList();
                rs = db.getAllItem();
                for (TodoItem i : rs) {
                    pw.write(i.id + ";" + i.title + ";" + i.dueDate + ";" + i.isDone + "\n");
                }
                pw.close();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
            } catch (SQLException ex) {
                Logger.getLogger(TODOliteDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_miExportCSVActionPerformed

    private void btDlgSelectDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDlgSelectDateActionPerformed
        
        Date selectedDate = (Date) datePicker.getModel().getValue();
        String date = selectedDate + "";
    }//GEN-LAST:event_btDlgSelectDateActionPerformed

    private void refreshItemList() {
        try {
            ArrayList<TodoItem> itemList = db.getAllItem();
            modelItemList.clear();
            for (TodoItem i : itemList) {
                modelItemList.addElement(i);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Failded execute database query",
                    "Database error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private boolean isDataValid(String title, JLabel titleError, String dueDateStr, JLabel dueDateError) {
        java.sql.Date sqlDueDate = null;
        boolean isTitleInvalid = (title.length() < 2 || title.length() > 50 || title.contains(";"));
        lblDlgTitleError.setVisible(isTitleInvalid);

//        int age = Integer.parseInt(ageStr);
//        boolean isAgeInvalid = (age < 1 || age > 150);
//        ageError.setVisible(isAgeInvalid);
//        boolean isPassportInvalid = !passport.matches("[a-zA-Z]{2}[0-9]{7}");
//        lblDlgPassportError.setVisible(isPassportInvalid);
////        boolean isPostcodeInvalid = !postcode.matches("[A-Z][0-9][A-Z] ?[0-9][A-Z][0-9]");
////        lblPassportError.setVisible(isPostcodeInvalid);
//        //
        boolean isDueDateInvalid = false;
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        try {
            java.util.Date dueDate = df.parse(dueDateStr);
            sqlDueDate = new java.sql.Date(dueDate.getTime());
            isDueDateInvalid = false;
        } catch (ParseException e) {
            isDueDateInvalid = true;
            e.printStackTrace();
        }
        lblDlgDueDateError.setVisible(isDueDateInvalid);
//        //
//
//        boolean isReturnInvalid = false;
//        try {
//            Date returnDate = df.parse(returnStr);
//            if (returnDate.compareTo(departure) > 0) {
//                isReturnInvalid = false;
//            } else {
//                isReturnInvalid = true;
//            }
//        } catch (ParseException e) {
//            e.printStackTrace();
//            isReturnInvalid = true;
//        }
//        lblDlgReturnError.setVisible(isReturnInvalid);

        return (!(isTitleInvalid || isDueDateInvalid));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TODOliteDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TODOliteDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TODOliteDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TODOliteDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TODOliteDB().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btDlgCancel;
    private javax.swing.JButton btDlgSave;
    private javax.swing.JButton btDlgSelectDate;
    private javax.swing.JCheckBox ckDlgDone;
    private javax.swing.JDialog dlgEditItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblDlgDueDateError;
    private javax.swing.JLabel lblDlgTitleError;
    private javax.swing.JList<TodoItem> lstItem;
    private javax.swing.JMenuItem miDelete;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miExportCSV;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JTextField tfDlgDueDate;
    private javax.swing.JTextField tfDlgTitle;
    private javax.swing.JTextField tfFilter;
    // End of variables declaration//GEN-END:variables
}
