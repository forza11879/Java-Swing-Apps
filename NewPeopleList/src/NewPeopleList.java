
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * DefaultListModel<Person> listModelPeople
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

class Person {

    private String name;
    private int age;
    private String postCode;
    
    public Person(String name, int age, String postCode) {
        setName(name);
        setAge(age);
        setPostCode(postCode);
        
    }

     public Person() {
        setName(name);
        setAge(age);
        setPostCode(postCode);
        
    }
     
    public String toString() {
        return getName() + " is " + getAge() + " years old ZIPcode is " + getPostCode();
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getPostCode() {
        return postCode;
    }

    public void setPostCode(String postCode) {
        this.postCode = postCode;
    }

}

public class NewPeopleList extends javax.swing.JFrame {

    
    DefaultListModel<Person> listModelPeople = new DefaultListModel<>();

    public NewPeopleList() {

        initComponents();
        lbNameErr.setVisible(false);
        lbAgeErr.setVisible(false);
        lbZipErr.setVisible(false);
        
    }

    File currentFile = new File("C:\\untitled.txt");
    boolean isModified = false;
    Person person ;
    String strSelect ="";


/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooserOpen = new javax.swing.JFileChooser();
        jFileChooserSave = new javax.swing.JFileChooser();
        popMenu = new javax.swing.JPopupMenu();
        miDel = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        listPeople = new javax.swing.JList<>();
        lbName = new javax.swing.JLabel();
        lbAge = new javax.swing.JLabel();
        lbPostCode = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        tfAge = new javax.swing.JTextField();
        tfZip = new javax.swing.JTextField();
        btAdd = new javax.swing.JButton();
        lbNameErr = new javax.swing.JLabel();
        lbAgeErr = new javax.swing.JLabel();
        lbZipErr = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miOpen = new javax.swing.JMenuItem();
        miSaveAs = new javax.swing.JMenuItem();
        miSaveSelect = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        popMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                popMenuMouseClicked(evt);
            }
        });

        miDel.setText("Delete");
        miDel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                miDelMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                miDelMouseReleased(evt);
            }
        });
        miDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDelActionPerformed(evt);
            }
        });
        popMenu.add(miDel);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        listPeople.setModel(listModelPeople);
        listPeople.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listPeople.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        listPeople.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listPeopleMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listPeople);

        lbName.setText("Name");

        lbAge.setText("Age");

        lbPostCode.setText("PostCode");

        tfName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNameActionPerformed(evt);
            }
        });

        tfZip.setText("H4L 0B5");

        btAdd.setText("Add Person");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        lbNameErr.setForeground(new java.awt.Color(255, 0, 0));
        lbNameErr.setText("Input Name illegal");

        lbAgeErr.setForeground(new java.awt.Color(255, 0, 0));
        lbAgeErr.setText("Input Age illegal");

        lbZipErr.setForeground(new java.awt.Color(255, 0, 0));
        lbZipErr.setText("Input zip illegal");

        jMenu1.setText("File");

        miOpen.setText("Open");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        jMenu1.add(miOpen);

        miSaveAs.setText("Save As...");
        miSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(miSaveAs);

        miSaveSelect.setText("Save SelectedAs");
        miSaveSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveSelectActionPerformed(evt);
            }
        });
        jMenu1.add(miSaveSelect);
        jMenu1.add(jSeparator1);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        jMenu1.add(miExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbName)
                    .addComponent(lbAge)
                    .addComponent(lbPostCode))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(tfName)
                        .addComponent(tfAge)
                        .addComponent(tfZip, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE))
                    .addComponent(btAdd)
                    .addComponent(lbNameErr)
                    .addComponent(lbAgeErr)
                    .addComponent(lbZipErr))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbNameErr)
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbAge))
                        .addGap(4, 4, 4)
                        .addComponent(lbAgeErr)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPostCode))
                        .addGap(2, 2, 2)
                        .addComponent(lbZipErr)
                        .addGap(18, 18, 18)
                        .addComponent(btAdd)))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        // TODO add your handling code here:
        Person person = new Person ();
        String name = tfName.getText();
        String age_str = tfAge.getText();
        String postCode = tfZip.getText();
        int intAge = 0;
        /////////////////////////CHECK the textArea values //////////////////////////////
        boolean isNameInvalid = (name.length() < 2  || name.length() > 20);
        lbNameErr.setVisible(isNameInvalid);
        if (!isInteger(tfAge.getText())){
            lbAgeErr.setVisible(true);
            return;
        }else {
            intAge = Integer.parseInt(tfAge.getText());
            boolean isAgeInvalid = ( intAge < 1 || intAge > 99 );
            lbAgeErr.setVisible(isAgeInvalid);        
        }
        boolean isAgeInvalid = !isInteger(tfAge.getText());

        boolean isZipInvalid = (!isValidPostalCode(tfZip.getText()));
        lbZipErr.setVisible(isZipInvalid); 
        
        if (isNameInvalid || isAgeInvalid || isZipInvalid){
            return;
        }
        String outputString = "";
        ///////////////////////////finished the check//////////////////////////////////
        /*
        if (name.isEmpty()){
            JOptionPane.showMessageDialog(this, "tfName is Empty","Name missing",JOptionPane.WARNING_MESSAGE);
            return;
        }else {
        person.setName(name);
        tfName.setText("");}

        if (age_str.isEmpty()){JOptionPane.showMessageDialog(this, "tfName is Empty","Name missing",JOptionPane.WARNING_MESSAGE);
            return;}else {
        person.setAge(intAge);}
        
        if (postCode.isEmpty()){
            JOptionPane.showMessageDialog(this, "Post Code is Empty","PostCode missing",JOptionPane.WARNING_MESSAGE);
            return;
        }else 
        {
        person.setPostCode(postCode);
        //tfZip.setText("");
        } */
        
        outputString = name+";"+age_str+";"+postCode;
        
        System.out.println("outputString is "+outputString);
        person.setAge(intAge);
        person.setName(name);
        person.setPostCode(postCode);
        listModelPeople.addElement(person);
        
        System.out.println("Add person is "+person.getName()+" "+person.getAge()+" "+person.getPostCode());

        //////////////////////////////////////////////////////////
        
        //listPeople.addMouseListener(new PopClickListener());
    }//GEN-LAST:event_btAddActionPerformed

  class PopMenu extends JPopupMenu {
    JMenuItem miDel;
    //JMenuItem miExit2;
    
    public PopMenu(){
        miDel = new JMenuItem("Delete it!");
        add(miDel);
        //add(miExit2);
    }
}


class PopClickListener extends MouseAdapter {

    public void mousePressed(MouseEvent e){
        if (e.isPopupTrigger())
            doPop(e);
    }

    public void mouseReleased(MouseEvent e){
        if (e.isPopupTrigger())
            doPop(e);
    }

    private void doPop(MouseEvent e){
        PopMenu menu = new PopMenu();
        menu.show(e.getComponent(), e.getX(), e.getY());
    }
    
}  


    private void tfNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfNameActionPerformed

    private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed
        // TODO add your handling code here:
        jFileChooserOpen.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
        if (jFileChooserOpen.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                currentFile = jFileChooserOpen.getSelectedFile();
                String s;
                Person pOpen =  new Person();
                String[] toSplit = new String[2];
                Scanner content = new Scanner(currentFile);

                    while (content.hasNextLine()){
                    s = content.nextLine();
                    toSplit = s.split(";");
                    pOpen = new Person(toSplit[0],Integer.parseInt(toSplit[1]),toSplit[2]);
                   // p = new Person("CC",24,"h5t 3M1");
                    }
                    content.close();

                listModelPeople.addElement(pOpen);
                //listModelPeople.addElement(content);
                System.out.println("Open the file ");
                System.out.println("content is "+content);
                //lblStatus.setText("Current file: " + currentFile.getAbsolutePath());
            } catch (IOException ex) {
                currentFile = null;
                JOptionPane.showMessageDialog(this,
                        "Unable to read file contents from " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_miOpenActionPerformed

    private void miDelActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        
        System.out.println("Delete");
    }
    
    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_miExitActionPerformed

    private void miSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveAsActionPerformed
        // TODO add your handling code here:
        //JList list = (JList)evt.getSource();
           //saveAs(person);
           jFileChooserSave.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
        //+".txt"
        if (jFileChooserSave.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = jFileChooserSave.getSelectedFile();
            String filePath = currentFile.getAbsolutePath();
        if(!filePath.endsWith(".txt")) {
            currentFile = new File(filePath + ".txt");
            }
            try (PrintWriter pw = new PrintWriter(currentFile)) {
                //pw.write(listModelPeople.getElementAt(1));
                int count = listModelPeople.getSize();
            for (int i = 0;i< count;i ++){
            Person person = listModelPeople.elementAt(i);
            strSelect = person.getName()+";"+person.getAge()+";"+person.getPostCode()+"\n";
            pw.write(strSelect);
            }
                int i = listModelPeople.getSize();                       
                System.out.println("Finished write file"+currentFile.getName());
                
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        
    }
        
    }//GEN-LAST:event_miSaveAsActionPerformed

    private void listPeopleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listPeopleMouseClicked
        // TODO add your handling code here:
        JList list = (JList)evt.getSource();
        if (evt.getClickCount() == 1 && (evt.getButton() != evt.BUTTON1) ) {
            int index = list.locationToIndex(evt.getPoint());
            System.out.println("index is "+index);
            //JList jList = new JList();
            Person pSelect = listModelPeople.elementAt(index);
            strSelect = pSelect.getName()+";"+pSelect.getAge()+";"+pSelect.getPostCode();
            
            //String name =(String) listModelPeople.get(index);
            System.out.println("Person object is "+listModelPeople.elementAt(index).toString());
            System.out.println("String is "+strSelect);
        }
    }//GEN-LAST:event_listPeopleMouseClicked

    private void miSaveSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveSelectActionPerformed
        // TODO add your handling code here:
        
        jFileChooserSave.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
        //+".txt"
        if (jFileChooserSave.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = jFileChooserSave.getSelectedFile();
            String filePath = currentFile.getAbsolutePath();
        if(!filePath.endsWith(".txt")) {
            currentFile = new File(filePath + ".txt");
            }
            try (PrintWriter pw = new PrintWriter(currentFile)) {
                //pw.write(listModelPeople.getElementAt(1));
                int i = listModelPeople.getSize();
                //String str = person.getName()+";"+person.getAge()+";"+person.getPostCode();
                pw.write(strSelect);       
                System.out.println("listModelPeople size  is "+i);
                //System.out.println("listModelPeople."+person.);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        
    }
        
    }//GEN-LAST:event_miSaveSelectActionPerformed

    private void popMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_popMenuMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) {
            int index = listPeople.locationToIndex(evt.getPoint());
            System.out.println("miDelMouseClicked index is "+ index);
            System.out.println("Do something! 524");
        }
        
    }//GEN-LAST:event_popMenuMouseClicked

    private void miDelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_miDelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_miDelMouseClicked

    private void miDelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_miDelMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger())
        {
            popMenu.show(this,evt.getX(),evt.getY());
        }
    }//GEN-LAST:event_miDelMouseReleased

    private void miDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDelActionPerformed
        int index = listPeople.getSelectedIndex();
       if (index == -1){
       JOptionPane.showMessageDialog(this,
                    "You must select a line first",
                    "Selection missing",
                    JOptionPane.WARNING_MESSAGE);
            return;
       
       }
       listModelPeople.remove(index);
    }
    }//GEN-LAST:event_miDelActionPerformed

private void deleteAndExit(){
    int n = JOptionPane.showConfirmDialog(
            listPeople,
                "Do you want to delete this line?",
                "An Inane Question",
                 JOptionPane.YES_NO_OPTION);

        if (n == JOptionPane.YES_OPTION) {
            
            listPeople.remove(n);
        } else if (n == JOptionPane.NO_OPTION) 
        {
           dispose();
        }
}
///////////////////////////////
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewPeopleList.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewPeopleList.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewPeopleList.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewPeopleList.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewPeopleList().setVisible(true);
            }
        });
    }
    
    /////////////////////////////////////////////////////////////////////
    public static boolean isInteger(String s) {
        return isInteger(s, 10);
    }

    public static boolean isInteger(String s, int radix) {
        if (s.isEmpty()) {
            return false;
        }
        for (int i = 0; i < s.length(); i++) {
            if (i == 0 && s.charAt(i) == '-') {
                if (s.length() == 1) {
                    return false;
                } else {
                    continue;
                }
            }
            if (Character.digit(s.charAt(i), radix) < 0) {
                return false;
            }
        }
        return true;
    }
    
    
    boolean isValidPostalCode(String code) {
    // must have 7 digits
    if(code.length() != 7)
      return false;

    // make if uppercase for not having to chack for A to Z AND a to z
    code = code.toUpperCase();
    // translate into digit
    char[] digit = code.toCharArray();

    if(digit[0] < 'A' || digit[0] > 'Z')
       return false;
    if(digit[1] < '0' || digit[1] > '9')
       return false;
    if(digit[2] < 'A' || digit[2] > 'Z')
       return false;
    if(digit[3] != ' ')
       return false;
    if(digit[4] < '0' || digit[4] > '9')
       return false;
    if(digit[5] < 'A' || digit[5] > 'Z')
       return false;
    if(digit[6] < '0' || digit[6] > '9')
       return false;
    // sounds OK to me
    return true;
}

 
    public static ArrayList<String> convertStringArrayToArraylist(String[] strArr){
    ArrayList<String> stringList = new ArrayList<String>();
    for (String s : strArr) {
        stringList.add(s);
    }
    return stringList;
}
    
    private void saveAs(Person person){ 
        //Person personSave = new Person();
       // person = new Person();
        
        jFileChooserSave.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
        //+".txt"
        if (jFileChooserSave.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = jFileChooserSave.getSelectedFile();
            String filePath = currentFile.getAbsolutePath();
            if(!filePath.endsWith(".txt")) {
            currentFile = new File(filePath + ".txt");
            }
            try (PrintWriter pw = new PrintWriter(currentFile)) {
                //pw.write(listModelPeople.getElementAt(1));
                int num = listModelPeople.getSize();
                for ( int i= 0; i <num ;i ++){
                String str = person.getName()+";"+person.getAge()+";"+person.getPostCode();
                System.out.println("String is "+str);
                pw.write(str);    
                }
                //System.out.println("listModelPeople size  is "+i);
                //System.out.println("listModelPeople."+person.);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }
 
   
    /////////////////////////////////////////////////////////////////////

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JFileChooser jFileChooserOpen;
    private javax.swing.JFileChooser jFileChooserSave;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lbAge;
    private javax.swing.JLabel lbAgeErr;
    private javax.swing.JLabel lbName;
    private javax.swing.JLabel lbNameErr;
    private javax.swing.JLabel lbPostCode;
    private javax.swing.JLabel lbZipErr;
    private javax.swing.JList<Person> listPeople;
    private javax.swing.JMenuItem miDel;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miSaveAs;
    private javax.swing.JMenuItem miSaveSelect;
    private javax.swing.JPopupMenu popMenu;
    private javax.swing.JTextField tfAge;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfZip;
    // End of variables declaration//GEN-END:variables
}
